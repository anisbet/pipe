#!/bin/bash
###
#
# Product: pipe.pl
# Purpose: Takes a Readme.md file and generates spec-n.test files testing.
#
# Copyright (c) Andrew Nisbet 2022.
# All code covered by the project's license.
#
###

INPUT_MARKDOWN="Readme.md"
PARSER="readme-parser.awk"
TMP_FILE=/tmp/$(basename -s .sh $0).$(date +'%Y%m%d%H%M').test
FILE_BREAK="# SPEC_FILE"
VERSION="0.0.01"

### Functions
# Prints out usage message.
usage()
{
    cat << EOFU!
 Usage: $0 [flags]
Generates spec-{FLAG}.test files from markdown, allowing tests to be 
automatically generated by well-formed, standardized markdown like that
found in a Readme.md file.

Flags:

-h, -help, --help: This help message.
-m, -markdown, --markdown{/foo/bar/readme.md}: Markdown to parse into tests.
-v, -version, --version: Print application version and exits.

 Example:
    ${0} --markdown=/home/user/foo.md
EOFU!
}

### Parameter handling
### Check input parameters.
# $@ is all command line parameters passed to the script.
# -o is for short options like -v
# -l is for long options with double dash like --version
# the comma separates different long options
# -a is for long options with single dash like -version
options=$(getopt -l "help,markdown:,version" -o "hm:v" -a -- "$@")
if [ $? != 0 ] ; then echo "Failed to parse options...exiting." >&2 ; exit 1 ; fi
# set --:
# If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters
# are set to the arguments, even if some of them begin with a ‘-’.
eval set -- "$options"
while true
do
    case $1 in
    -h|--help)
        usage
        exit 0
        ;;
    -m|--markdown)
        shift
        export INPUT_MARKDOWN="$1"
        ;;
    -v|--version)
        echo "$0 version: $VERSION"
        exit 0
        ;;
    --)
        shift
        break
        ;;
    esac
    shift
done

# Test for the requested markdown file.
[[ -r "$INPUT_MARKDOWN" ]] || { echo "**error no such file '$INPUT_MARKDOWN'"; exit 1; }
# Test for the awk markdown parser.
[[ -r "$PARSER" ]] || { echo "**error missing markdown parser awk file '$PARSER'"; exit 1; }
# Make mast spec file from markdown
echo "writing test to temp file: '$TMP_FILE'"
awk -f $PARSER $INPUT_MARKDOWN >$TMP_FILE
[[ -r "$TMP_FILE" ]] || { echo "**error failed to create '$TMP_FILE'. Is there something wrong with '$INPUT_MARKDOWN'?"; exit 1; }
# Read in the converted master spec file and parse into individual spec files and shell scripts.
thisSpecFile=''
while IFS= read -r line
do
    if echo "$line" | grep "$FILE_BREAK" 2>&1 >/dev/null; then
        thisSpecFile=$(echo "$line" | awk -F "=" '/# SPEC_FILE/ {print $2}')
        [[ -z "$thisSpecFile" ]] && { echo "**error parsing specification file name in '$INPUT_MARKDOWN'"; exit 1; }
        echo "generating spec file: '$thisSpecFile'"
        # Stop repeat runs from appending to the spec.
        [[ -f "$thisSpecFile" ]] && rm "$thisSpecFile"
    fi
    echo "$line" >>"$thisSpecFile"
done < "$TMP_FILE"
rm "$TMP_FILE"
echo "done"
# EOF
